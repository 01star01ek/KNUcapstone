## 3번) 언더플로 구현

1. 환경 구축 및 폴더 생성

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/3875dcd4-9f7b-40ea-a373-af637578d81d/ab990ff2-918e-4c27-93dc-fabf8604511c/Untitled.png)

리눅스 개발환경은 구름 IDE 대신 cmd 창에서 ubuntu를 설치하여 구현하였습니다.

해당 과제를 위하여 별도의 directory를 만든 후 해당 디렉토리 안에 메인 코드를 작성하였습니다.

1. 메인 코드 작성

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/3875dcd4-9f7b-40ea-a373-af637578d81d/e04730dc-6c8d-4d8a-878d-f7e9a8d8695c/Untitled.png)

오버플로우 코드를 참고하여 언더플로우 코드로 재작성하였습니다.

코드를 간략히 설명드리자면

char 형식의 변수 vlaue에 CHAR_MIN 즉 char 형식의 변수의 최소값을  저장합니다.

이를 출력해보고 최소값에서도 1을 뺀 값을 다시 value에 저장합니다.

그 다음 이를 다시 출력합니다.

1. gcc, gdb 설치 

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/3875dcd4-9f7b-40ea-a373-af637578d81d/8949fc0c-0c64-4025-a6a3-36929c61a8e2/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/3875dcd4-9f7b-40ea-a373-af637578d81d/c36bf2ff-757f-4dc3-8c12-86ab9988c957/Untitled.png)

gcc와 gdb 명령어를 실행했을때 설치되어있지 않아 error 가 발생하여 이를 설치하였습니다. 

1. gdb를 사용하여 디버깅을 통한 출력 결과 확인

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/3875dcd4-9f7b-40ea-a373-af637578d81d/3d96dcea-239a-4b41-917d-eff75204bad4/Untitled.png)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/3875dcd4-9f7b-40ea-a373-af637578d81d/aa8ea3b0-a523-4c17-867d-2b927511cf2e/Untitled.png)

main문에 break를 걸고 이를 한줄씩 실행시켜주는 명령어인 n을 입력하여

순차적인 명령어에 따라 value값이 어떻게 변하는지 확인하였습니다.